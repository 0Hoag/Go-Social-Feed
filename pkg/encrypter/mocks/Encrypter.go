// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Encrypter is an autogenerated mock type for the Encrypter type
type Encrypter struct {
	mock.Mock
}

// Decrypt provides a mock function with given fields: ciphertext
func (_m *Encrypter) Decrypt(ciphertext string) (string, error) {
	ret := _m.Called(ciphertext)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(ciphertext)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(ciphertext)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ciphertext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecryptCodeToData provides a mock function with given fields: code
func (_m *Encrypter) DecryptCodeToData(code string) (string, error) {
	ret := _m.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for DecryptCodeToData")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(code)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encrypt provides a mock function with given fields: plaintext
func (_m *Encrypter) Encrypt(plaintext string) (string, error) {
	ret := _m.Called(plaintext)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(plaintext)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(plaintext)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(plaintext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncryptDataToCode provides a mock function with given fields: data, expire, expireUnit
func (_m *Encrypter) EncryptDataToCode(data string, expire int64, expireUnit string) (string, error) {
	ret := _m.Called(data, expire, expireUnit)

	if len(ret) == 0 {
		panic("no return value specified for EncryptDataToCode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int64, string) (string, error)); ok {
		return rf(data, expire, expireUnit)
	}
	if rf, ok := ret.Get(0).(func(string, int64, string) string); ok {
		r0 = rf(data, expire, expireUnit)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, int64, string) error); ok {
		r1 = rf(data, expire, expireUnit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEncrypter creates a new instance of Encrypter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEncrypter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Encrypter {
	mock := &Encrypter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
