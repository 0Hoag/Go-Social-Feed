// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/hoag/go-social-feed/internal/models"
	mock "github.com/stretchr/testify/mock"

	paginator "github.com/hoag/go-social-feed/pkg/paginator"

	repository "github.com/hoag/go-social-feed/internal/reaction/repository"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, sc, opts
func (_m *Repository) Create(ctx context.Context, sc models.Scope, opts repository.CreateOptions) (models.Reaction, error) {
	ret := _m.Called(ctx, sc, opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.Reaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Scope, repository.CreateOptions) (models.Reaction, error)); ok {
		return rf(ctx, sc, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Scope, repository.CreateOptions) models.Reaction); ok {
		r0 = rf(ctx, sc, opts)
	} else {
		r0 = ret.Get(0).(models.Reaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Scope, repository.CreateOptions) error); ok {
		r1 = rf(ctx, sc, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, sc, id
func (_m *Repository) Delete(ctx context.Context, sc models.Scope, id string) error {
	ret := _m.Called(ctx, sc, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Scope, string) error); ok {
		r0 = rf(ctx, sc, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Detail provides a mock function with given fields: ctx, sc, id
func (_m *Repository) Detail(ctx context.Context, sc models.Scope, id string) (models.Reaction, error) {
	ret := _m.Called(ctx, sc, id)

	if len(ret) == 0 {
		panic("no return value specified for Detail")
	}

	var r0 models.Reaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Scope, string) (models.Reaction, error)); ok {
		return rf(ctx, sc, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Scope, string) models.Reaction); ok {
		r0 = rf(ctx, sc, id)
	} else {
		r0 = ret.Get(0).(models.Reaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Scope, string) error); ok {
		r1 = rf(ctx, sc, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, sc, opts
func (_m *Repository) Get(ctx context.Context, sc models.Scope, opts repository.GetOptions) ([]models.Reaction, paginator.Paginator, error) {
	ret := _m.Called(ctx, sc, opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []models.Reaction
	var r1 paginator.Paginator
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Scope, repository.GetOptions) ([]models.Reaction, paginator.Paginator, error)); ok {
		return rf(ctx, sc, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Scope, repository.GetOptions) []models.Reaction); ok {
		r0 = rf(ctx, sc, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Scope, repository.GetOptions) paginator.Paginator); ok {
		r1 = rf(ctx, sc, opts)
	} else {
		r1 = ret.Get(1).(paginator.Paginator)
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.Scope, repository.GetOptions) error); ok {
		r2 = rf(ctx, sc, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// List provides a mock function with given fields: ctx, sc, opts
func (_m *Repository) List(ctx context.Context, sc models.Scope, opts repository.ListOptions) ([]models.Reaction, error) {
	ret := _m.Called(ctx, sc, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Reaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Scope, repository.ListOptions) ([]models.Reaction, error)); ok {
		return rf(ctx, sc, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Scope, repository.ListOptions) []models.Reaction); ok {
		r0 = rf(ctx, sc, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Scope, repository.ListOptions) error); ok {
		r1 = rf(ctx, sc, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
